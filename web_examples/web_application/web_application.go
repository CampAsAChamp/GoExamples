package main

/*
Wiki Page Web Application
--------------------------------------------

ENDPOINTS
----------
/albums
- GET – Get a list of all albums, returned as JSON.
- POST – Add a new album from request data sent as JSON.

/albums/:id
- GET – Get an album by its ID, returning the album data as JSON.

*/
import (
	"errors"
	"fmt"
	"html/template"
	"log"
	"net/http"
	"os"
	"regexp"
)

// Global Variables
var templates = template.Must(template.ParseFiles("edit.html", "view.html"))

// Will parse and compile the regular expression, and return a regexp.Regexp.
var validPath = regexp.MustCompile("^/(edit|save|view)/([a-zA-Z0-9]+)$")

// Wiki consists fo a series of interconnected pages, each of which has a title and a body (the page content)
type Page struct {
	Title string
	Body  []byte // This is the type expected by the io libraries, rather than using a string
}

// For persistant storage
func (p *Page) save() error {
	filename := p.Title + ".txt"
	return os.WriteFile(filename, p.Body, 0600)
}

func loadPage(title string) (*Page, error) {
	filename := title + ".txt"
	body, err := os.ReadFile(filename)
	if err != nil {
		log.Printf("Error Reading File: %s\n", err)
		return nil, err
	}

	return &Page{Title: title, Body: body}, nil

}

func viewHandler(w http.ResponseWriter, r *http.Request, title string) {
	p, err := loadPage(title)
	if err != nil {
		http.Redirect(w, r, "/edit/"+title, http.StatusFound)
		return
	}

	renderTemplate("view", w, p)
}

func editHandler(w http.ResponseWriter, r *http.Request, title string) {
	p, err := loadPage(title)
	if err != nil {
		p = &Page{Title: title}
	}

	renderTemplate("edit", w, p)
}

func saveHandler(w http.ResponseWriter, r *http.Request, title string) {

	body := r.FormValue("body")
	p := &Page{Title: title, Body: []byte(body)}

	err := p.save()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	http.Redirect(w, r, "/view/"+title, http.StatusFound)
}

func renderTemplate(templateName string, w http.ResponseWriter, p *Page) {
	// html/template package helps guarantee that only safe and correct looking HTML is generated by template actions
	// For instance is uatomatically escapes any great than sign(>), replacing it with &gt; to make sure user data does not corrupt the form HTML

	// Initially this function called parseFiles every time a page is rendered.
	// A better approach would be to call ParseFiles ocne at program initialization, parsing all templates into a single *Template
	// then we can use the ExecuteTemplate the render a specific template
	// err = t.Execute(w, p)

	err := templates.ExecuteTemplate(w, templateName+".html", p)
	if err != nil {
		log.Printf("Error Executing Template: %s\n", err)
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
}

// Uses the validPath expression to validate path and extract the page title
// If the title is valid, it will be returned along with a nil error value
// If the title is invalid, it will write a 404 Not Found error to the HTTP connection, and return an error to the handler
func getTitle(w http.ResponseWriter, r *http.Request) (string, error) {
	m := validPath.FindStringSubmatch(r.URL.Path)
	if m == nil {
		http.NotFound(w, r)
		return "", errors.New("Invalid Page Title")
	}

	fmt.Println(m)
	// The title is the second subexpression
	return m[2], nil
}

// Wrapper function that takes one of the handler, and returns a function of type http.HandlerFunc
func makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {
	return func(rw http.ResponseWriter, r *http.Request) {
		// Here we will extract the page title from the Request,
		// and call the provided handler 'fn'
		m := validPath.FindStringSubmatch(r.URL.Path)
		if m == nil {
			http.NotFound(rw, r)
			return
		}

		fn(rw, r, m[2])
	}

}

func editHandlerNoTemplate(w http.ResponseWriter, r *http.Request) {
	title := r.URL.Path[len("/edit/"):]
	p, err := loadPage(title)
	if err != nil {
		p = &Page{Title: title}
	}
	fmt.Fprintf(w, "<h1>Editing %s</h1>"+
		"<form action=\"/save/%s\" method=\"POST\">"+
		"<textarea name=\"body\">%s</textarea><br>"+
		"<input type=\"submit\" value=\"Save\">"+
		"</form>",
		p.Title, p.Title, p.Body)
}

func main() {
	http.HandleFunc("/view/", makeHandler(viewHandler))
	http.HandleFunc("/edit/", makeHandler(editHandler))
	http.HandleFunc("/save/", makeHandler(saveHandler))
	log.Fatal(http.ListenAndServe(":8080", nil))
}
